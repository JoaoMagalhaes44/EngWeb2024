import xml.etree.ElementTree as ET
import os

def create_html(xml_file):
    global current_output_number
    mytree = ET.parse(xml_file)
    myroot = mytree.getroot()
    
    # Obter o número a partir de <meta>
    numero = myroot[0].find("número").text

    # Adicione as imagens
    imagens_html = ""
    for Childfig in myroot[1].findall("figura"):
        img_path_element = Childfig.find("imagem")
        legenda_element = Childfig.find("legenda")

        if img_path_element is not None and legenda_element is not None:
            img_path = img_path_element.attrib["path"]
            legenda = legenda_element.text
            
        imagens_html += f'<img src="{img_path}" alt="{legenda}">\n<p>{legenda}</p>\n'

    # Adicione os parágrafos e lugar
    paragrafos_html = ""
    for para in myroot.find(".//corpo").findall("para"):
        para_text = ""
        for text in para.itertext():
            para_text += text

        # Substituir as ocorrências de lugar em para_text
        for element in para.findall("lugar"):
            if element.text:
                para_text = para_text.replace(element.text, element.text)

        paragrafos_html += f'<p>{para_text}</p>\n'

    # Adicione a lista de casas
    lista_casas_html = ""
    lista_casas = myroot[1].find("lista-casas")
    if lista_casas is not None:
        for casa in lista_casas.findall("casa"):
            numero_element = casa.find("número")
            enfiteuta_element = casa.find("enfiteuta")
            foro_element = casa.find("foro")

            numero = numero_element.text if numero_element is not None else "N/A"
            enfiteuta = enfiteuta_element.text if enfiteuta_element is not None else "N/A"
            foro = foro_element.text if foro_element is not None else "N/A"
            
            desc_element = casa.find("desc")
            if desc_element is not None:
                desc_text = ""
                for para in desc_element.findall("para"):
                    para_text = ""
                    for text in para.itertext():
                        para_text += text
                        
                    for element in para.iter():
                        if element.text:
                            para_text = para_text.replace(element.text, element.text)
                
                desc_text += f'{para_text}'

                lista_casas_html += f"""
                <tr>
                    <td>
                        Número: {numero}
                    </td>
                    <td>
                        Enfiteuta: {enfiteuta}
                    </td>
                    <td>
                        Foro: {foro}
                    </td>
                    <td>
                        Descrição: {desc_text}
                    </td>
                </tr>
                \n"""

    # Criar a string HTML final
    html_str = f"""
        <!DOCTYPE html> 
        <html>
            <head>
                <title>Rua: {myroot[0].find('nome').text}</title>
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <link rel="stylesheet" href="w3.css">
                <meta charset="utf-8"/> 
            </head>
            <body>
                {imagens_html}
                {paragrafos_html}
                <table border="1">
                    {lista_casas_html}
                </table>
                <footer class="w3-container w3-blue-gray">
                    <h5>Generated by RuaApp::EngWeb2024::A100740 </h5>
                    <adress>
                    <a href ="index.html">Voltar à página principal</a>
                    </adress>
                </footer>   
            </body>
        </html>
    """
    
    def remove_spaces(text):
        return text.replace(" ", "")

    # Salve o HTML em um arquivo
    with open("RuaSite/"+str(remove_spaces(myroot[0].find("nome").text)) + ".html", "w", encoding="utf-8") as html_file:
        html_file.write(html_str)

# Guardar a pasta que contem as ruas
xml_folder = "/Users/jony/Documents/GitHub/EngWeb2024/TPC1/MapaRuas-materialBase/texto/"

# Guardar todos os arquivos em xml_files
xml_files = [f for f in os.listdir(xml_folder) if f.endswith(".xml")] #itera sobre f e se tiver a extensão .xml adiciona

# Chamada da função
for xml_file in xml_files:
    xml_file_path = os.path.join(xml_folder, xml_file)
    create_html(xml_file_path)

